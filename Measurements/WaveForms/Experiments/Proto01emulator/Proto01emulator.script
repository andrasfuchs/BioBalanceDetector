// This script is an emulation of the BBD Proto #1 (The Color Cube)

// 3.3V-5V -> NeoPixel 5VDC
// GND     -> NeoPixel GND
// AD2 D15 -> NeoPixel DIN


var avgSamplesCountShort = 8;       // ~1/4 seconds @ 32 samples and 8 kHz
var avgSamplesCountLong = 160;		 // ~5 seconds @ 32 samples and 8 kHz

var amplificationFactor = 500.0;   // the higher the amplification to more sensitive the device is (500-EM-noisy background  750-typical background)

var ledPower = 50;
var ledR = 0;
var ledG = 0;
var ledB = 0;

var avgSamplesShort = [avgSamplesCountShort];
var avgSamplesLong = [avgSamplesCountLong];
var uartMessages = [8];

if(!('Scope1' in this)) throw "Please open a Scope instrument";

plot1.X.Units.text = "s";
plot1.Y1.AutoScale.checked = false;
plot1.Y1.Range.value = 0.1;

print("Initializing moving average buffers, please wait...");

var j=0;
Scope1.run()
while(Scope1.wait())
{
    var data = Scope1.Channel1.data;
    plot1.Y1.data = data;

    var avg = 0
    data.forEach(function(v){avg += v})
    avg /= data.length

    avgSamplesShort[j % avgSamplesCountShort] = avg;
    avgSamplesLong[j % avgSamplesCountLong] = avg;

    var adcValueAvgShort = 0.0;   
    for (i=0; i<avgSamplesCountShort; i++)
    {
        adcValueAvgShort += avgSamplesShort[i];
    }
    adcValueAvgShort /= avgSamplesCountShort;

    var adcValueAvgLong = 0.0;    
    for (i=0; i<avgSamplesCountLong; i++)
    {
        adcValueAvgLong += avgSamplesLong[i];
    }
    adcValueAvgLong /= avgSamplesCountLong;
    
//    print("Short Average: "+adcValueAvgShort+" V | " + "Long Average: "+adcValueAvgLong+" V");

    j++;


var adcValueAvg = ((adcValueAvgShort - adcValueAvgLong) * amplificationFactor) + 0.5;

if ((adcValueAvg > 0.4) && (adcValueAvg < 0.6))
	{
		ledR = 0;
		ledG = 255;
		ledB = 0;
					
		if (adcValueAvg < 0.5)
		{
			ledPower = (1000 * (adcValueAvg - 0.4)) + 10;
		} else
		{
			ledPower = (1000 * (0.6 - adcValueAvg)) + 10;
		}
	} else if (adcValueAvg <= 0.4)
	{
		ledR = 0;
		ledG = 0;
		ledB = 255;
					
		ledPower = (256 * (0.4 - adcValueAvg)) + 10;
	} else if (adcValueAvg >= 0.6)
	{
		ledR = 255;
		ledG = 0;
		ledB = 0;
					
		ledPower = (256 * (adcValueAvg - 0.6)) + 10;
	}


    if (ledR == 255)
    {
        print("RED   ("+ledPower+")");
        uartMessages[j%8] = "136 136 136 136 "+ToNeoPixelValue(ledPower)+"136 136 136 136 136 136 136 136";
    } else
    if (ledB == 255)
    {
        print("BLUE  ("+ledPower+")");
        uartMessages[j%8] = "136 136 136 136 136 136 136 136 "+ToNeoPixelValue(ledPower)+"136 136 136 136";
    } else
    if (ledG == 255)
    {
        print("GREEN ("+ledPower+")");
        uartMessages[j%8] = ToNeoPixelValue(ledPower)+"136 136 136 136 136 136 136 136 136 136 136 136";
    }


    var uartMessage = "";
    for (l=j+7;l>=j;l--)
    {
        uartMessage = uartMessage + " " + uartMessages[l%8];
    }
    Protocol.UART.Send(uartMessage,true);
    wait(0.03);
}


function ToNeoPixelValue(floatValue) {
    var result = "";
    var intValue = Math.floor(floatValue);

    for (k=0; k<4; k++)
    {
        switch (intValue%4)
        {
            case (0):
            result = "136 " + result;
            break;
            case (1):
            result = "140 " + result;
            break;
            case (2):
            result = "200 " + result;
            break;
            case (3):
            result = "204 " + result;
            break;
        }
        intValue = intValue >> 2;
    }
    
    return result;
}
