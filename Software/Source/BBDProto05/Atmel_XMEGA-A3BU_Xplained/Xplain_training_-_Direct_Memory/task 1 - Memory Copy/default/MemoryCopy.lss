
MemoryCopy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000496  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00802000  00802000  0000050a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047c5  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034a6  00000000  00000000  00004e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093d  00000000  00000000  000082c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00008c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d05  00000000  00000000  00008e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  0000bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000c305  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_6>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	aa 3c       	cpi	r26, 0xCA	; 202
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 c3 01 	call	0x386	; 0x386 <main>
 220:	0c 94 49 02 	jmp	0x492	; 0x492 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <DMA_ReturnStatus_non_blocking>:
 *  \param  channel  The channel to configure.
 *  \param  trigger  The trigger source ID.
 */
void DMA_SetTriggerSource( volatile DMA_CH_t * channel, uint8_t trigger )
{
	channel->TRIGSRC = trigger;
 228:	fc 01       	movw	r30, r24
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	80 73       	andi	r24, 0x30	; 48
 22e:	08 95       	ret

00000230 <DMA_EnableChannel>:
 230:	fc 01       	movw	r30, r24
 232:	90 81       	ld	r25, Z
 234:	90 68       	ori	r25, 0x80	; 128
 236:	90 83       	st	Z, r25
 238:	08 95       	ret

0000023a <DMA_SetIntLevel>:
 23a:	fc 01       	movw	r30, r24
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	90 7f       	andi	r25, 0xF0	; 240
 240:	49 2b       	or	r20, r25
 242:	46 2b       	or	r20, r22
 244:	41 83       	std	Z+1, r20	; 0x01
 246:	08 95       	ret

00000248 <DMA_SetupBlock>:
 248:	8f 92       	push	r8
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	cf 92       	push	r12
 250:	ef 92       	push	r14
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	fc 01       	movw	r30, r24
 260:	60 87       	std	Z+8, r22	; 0x08
 262:	71 87       	std	Z+9, r23	; 0x09
 264:	12 86       	std	Z+10, r1	; 0x0a
 266:	04 87       	std	Z+12, r16	; 0x0c
 268:	15 87       	std	Z+13, r17	; 0x0d
 26a:	16 86       	std	Z+14, r1	; 0x0e
 26c:	ce 28       	or	r12, r14
 26e:	2c 29       	or	r18, r12
 270:	42 2b       	or	r20, r18
 272:	42 83       	std	Z+2, r20	; 0x02
 274:	a4 82       	std	Z+4, r10	; 0x04
 276:	b5 82       	std	Z+5, r11	; 0x05
 278:	80 81       	ld	r24, Z
 27a:	8c 7d       	andi	r24, 0xDC	; 220
 27c:	88 29       	or	r24, r8
 27e:	9e 85       	ldd	r25, Y+14	; 0x0e
 280:	99 23       	and	r25, r25
 282:	71 f0       	breq	.+28     	; 0x2a0 <DMA_SetupBlock+0x58>
 284:	80 62       	ori	r24, 0x20	; 32
 286:	80 83       	st	Z, r24
 288:	8d 85       	ldd	r24, Y+13	; 0x0d
 28a:	86 83       	std	Z+6, r24	; 0x06
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ef 90       	pop	r14
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	8f 90       	pop	r8
 29e:	08 95       	ret
 2a0:	80 83       	st	Z, r24
 2a2:	f4 cf       	rjmp	.-24     	; 0x28c <DMA_SetupBlock+0x44>

000002a4 <DMA_StartTransfer>:
 *  The bit will automatically clear when transfer starts.
 *
 *  \param  channel  The channel to request a transfer for.
 */
void DMA_StartTransfer( volatile DMA_CH_t * channel )
{
 2a4:	fc 01       	movw	r30, r24
	channel->CTRLA |= DMA_CH_TRFREQ_bm;
 2a6:	90 81       	ld	r25, Z
 2a8:	90 61       	ori	r25, 0x10	; 16
 2aa:	90 83       	st	Z, r25
 2ac:	08 95       	ret

000002ae <AsyncMemCopy>:
 */
void AsyncMemCopy( const void * src,
                   void * dest,
                   uint16_t blockSize,
                   DMA_CH_t * dmaChannel )
{
 2ae:	6f 92       	push	r6
 2b0:	7f 92       	push	r7
 2b2:	8f 92       	push	r8
 2b4:	af 92       	push	r10
 2b6:	bf 92       	push	r11
 2b8:	cf 92       	push	r12
 2ba:	ef 92       	push	r14
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	3c 01       	movw	r6, r24
 2c6:	8b 01       	movw	r16, r22
 2c8:	5a 01       	movw	r10, r20
 2ca:	e9 01       	movw	r28, r18
	DMA_EnableChannel( dmaChannel );
 2cc:	c9 01       	movw	r24, r18
 2ce:	0e 94 18 01 	call	0x230	; 0x230 <DMA_EnableChannel>

	DMA_SetupBlock( dmaChannel,
 2d2:	1f 92       	push	r1
 2d4:	1f 92       	push	r1
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	88 2e       	mov	r8, r24
 2da:	cc 24       	eor	r12, r12
 2dc:	c3 94       	inc	r12
 2de:	e1 2c       	mov	r14, r1
 2e0:	20 e1       	ldi	r18, 0x10	; 16
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	b3 01       	movw	r22, r6
 2e6:	ce 01       	movw	r24, r28
 2e8:	0e 94 24 01 	call	0x248	; 0x248 <DMA_SetupBlock>
	                blockSize,
	                DMA_CH_BURSTLEN_8BYTE_gc,
	                0,
	                false );

	DMA_StartTransfer( dmaChannel );
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	ce 01       	movw	r24, r28
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ef 90       	pop	r14
 2fc:	cf 90       	pop	r12
 2fe:	bf 90       	pop	r11
 300:	af 90       	pop	r10
 302:	8f 90       	pop	r8
 304:	7f 90       	pop	r7
 306:	6f 90       	pop	r6
	                blockSize,
	                DMA_CH_BURSTLEN_8BYTE_gc,
	                0,
	                false );

	DMA_StartTransfer( dmaChannel );
 308:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <DMA_StartTransfer>

0000030c <MemCopy>:
 */


bool MemCopy( const void * src, void * dest, uint16_t blockSize,
                          DMA_CH_t * dmaChannel )
{
 30c:	6f 92       	push	r6
 30e:	7f 92       	push	r7
 310:	8f 92       	push	r8
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	ef 92       	push	r14
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	3c 01       	movw	r6, r24
 324:	8b 01       	movw	r16, r22
 326:	5a 01       	movw	r10, r20
 328:	e9 01       	movw	r28, r18
    uint8_t flags = 0;

	DMA_EnableChannel( dmaChannel );
 32a:	c9 01       	movw	r24, r18
 32c:	0e 94 18 01 	call	0x230	; 0x230 <DMA_EnableChannel>
	DMA_SetupBlock( dmaChannel,
 330:	1f 92       	push	r1
 332:	1f 92       	push	r1
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	88 2e       	mov	r8, r24
 338:	cc 24       	eor	r12, r12
 33a:	c3 94       	inc	r12
 33c:	e1 2c       	mov	r14, r1
 33e:	20 e1       	ldi	r18, 0x10	; 16
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	b3 01       	movw	r22, r6
 344:	ce 01       	movw	r24, r28
 346:	0e 94 24 01 	call	0x248	; 0x248 <DMA_SetupBlock>
	                blockSize,
	                DMA_CH_BURSTLEN_8BYTE_gc,
	                0, 
	                false ); // no repeat

	DMA_StartTransfer( dmaChannel );
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DMA_StartTransfer>
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0

    // Wait until the completion or error flag is set. The flags
	// must be cleared manually.
    do {
        flags = DMA_ReturnStatus_non_blocking( dmaChannel );
 354:	ce 01       	movw	r24, r28
 356:	0e 94 14 01 	call	0x228	; 0x228 <DMA_ReturnStatus_non_blocking>
    } while ( flags == 0 );
 35a:	88 23       	and	r24, r24
 35c:	d9 f3       	breq	.-10     	; 0x354 <MemCopy+0x48>

	// Clear flags
    DMA.CH0.CTRLB |= ( flags );
 35e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x700111>
 362:	98 2b       	or	r25, r24
 364:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__TEXT_REGION_LENGTH__+0x700111>
        return true;
    } else 
    {
        return false;
    }
}
 368:	85 fb       	bst	r24, 5
 36a:	88 27       	eor	r24, r24
 36c:	80 f9       	bld	r24, 0
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ef 90       	pop	r14
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	8f 90       	pop	r8
 380:	7f 90       	pop	r7
 382:	6f 90       	pop	r6
 384:	08 95       	ret

00000386 <main>:
//  completes or get an error. The second test use an interrupt to 
//  know when the transfer completes or get an error.
int main( void )
{
	uint16_t index;
    LEDPORT.DIR = 0xFF;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
    LEDPORT.OUT = 0xFF;
 38c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>

	DMA_CH_t * Channel;
	Channel = &DMA.CH0;

	DMA_Enable();
 390:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 394:	80 68       	ori	r24, 0x80	; 128
 396:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 39a:	c6 e6       	ldi	r28, 0x66	; 102
 39c:	d0 e2       	ldi	r29, 0x20	; 32
 39e:	fe 01       	movw	r30, r28
 3a0:	8e 2f       	mov	r24, r30
 3a2:	8c 1b       	sub	r24, r28

    // Test 1: Copy using polling. 

    // Fill memory block A with example data.
	for ( index = 0; index < MEM_BLOCK_SIZE; ++index ) {
		memoryBlockA[index] = ( (uint8_t) index & 0xff );
 3a4:	81 93       	st	Z+, r24
	DMA_Enable();

    // Test 1: Copy using polling. 

    // Fill memory block A with example data.
	for ( index = 0; index < MEM_BLOCK_SIZE; ++index ) {
 3a6:	80 e2       	ldi	r24, 0x20	; 32
 3a8:	ea 3c       	cpi	r30, 0xCA	; 202
 3aa:	f8 07       	cpc	r31, r24
 3ac:	c9 f7       	brne	.-14     	; 0x3a0 <main+0x1a>
		memoryBlockA[index] = ( (uint8_t) index & 0xff );
	}

	// Copy data using channel 0.
	gTransferError = MemCopy(memoryBlockA, memoryBlockB, 100, Channel);
 3ae:	20 e1       	ldi	r18, 0x10	; 16
 3b0:	31 e0       	ldi	r19, 0x01	; 1
 3b2:	44 e6       	ldi	r20, 0x64	; 100
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	70 e2       	ldi	r23, 0x20	; 32
 3ba:	86 e6       	ldi	r24, 0x66	; 102
 3bc:	90 e2       	ldi	r25, 0x20	; 32
 3be:	0e 94 86 01 	call	0x30c	; 0x30c <MemCopy>
 3c2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>

	// Compare memory blocks if status is true
	if ( gTransferError ) 
 3c6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3ca:	88 23       	and	r24, r24
 3cc:	b1 f1       	breq	.+108    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
        // Signal Error on LEDs by turning them all on
        LEDPORT.OUT = 0x00;
 3ce:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
    
	//  Test 2: Copy using interrupts.
	
	//  Enable LO interrupt level for the complete transaction and
	//  error flag on DMA channel 0.
	DMA_SetIntLevel( Channel, DMA_CH_TRNINTLVL_LO_gc, DMA_CH_ERRINTLVL_LO_gc );
 3d2:	44 e0       	ldi	r20, 0x04	; 4
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 1d 01 	call	0x23a	; 0x23a <DMA_SetIntLevel>
    PMIC.CTRL |= PMIC_LOLVLEN_bm;
 3de:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255

    // Fill memory block A with example data again.
    for ( index = 0; index < MEM_BLOCK_SIZE; ++index ) 
    {
        memoryBlockA[index] = 0xff - ( (uint8_t) index & 0xff );
 3ea:	89 93       	st	Y+, r24
 3ec:	81 50       	subi	r24, 0x01	; 1
	//  error flag on DMA channel 0.
	DMA_SetIntLevel( Channel, DMA_CH_TRNINTLVL_LO_gc, DMA_CH_ERRINTLVL_LO_gc );
    PMIC.CTRL |= PMIC_LOLVLEN_bm;

    // Fill memory block A with example data again.
    for ( index = 0; index < MEM_BLOCK_SIZE; ++index ) 
 3ee:	8b 39       	cpi	r24, 0x9B	; 155
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x64>
    {
        memoryBlockA[index] = 0xff - ( (uint8_t) index & 0xff );
    }
    // Set intDone to false to know when it has been executed.
    gInterruptDone = false;
 3f2:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <gInterruptDone>
	gTransferError = false;
 3f6:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>

	// Clear pending interrupts
	DMA.INTFLAGS |= DMA_CH0TRNIF_bm|DMA_CH0ERRIF_bm;
 3fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 3fe:	81 61       	ori	r24, 0x11	; 17
 400:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>

    // Enable interrupts
    sei();
 404:	78 94       	sei


    // Copy data using channel 0. 
    AsyncMemCopy(  memoryBlockA,
 406:	20 e1       	ldi	r18, 0x10	; 16
 408:	31 e0       	ldi	r19, 0x01	; 1
 40a:	44 e6       	ldi	r20, 0x64	; 100
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	70 e2       	ldi	r23, 0x20	; 32
 412:	86 e6       	ldi	r24, 0x66	; 102
 414:	90 e2       	ldi	r25, 0x20	; 32
 416:	0e 94 57 01 	call	0x2ae	; 0x2ae <AsyncMemCopy>

    do 
    {
        // Do something here while waiting for the
        // interrupt routine to signal completion.
		LEDPORT.OUTTGL = 0x10;
 41a:	90 e1       	ldi	r25, 0x10	; 16
 41c:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		nop();
 420:	00 00       	nop
    } while ( gInterruptDone == false );
 422:	80 91 65 20 	lds	r24, 0x2065	; 0x802065 <gInterruptDone>
 426:	88 23       	and	r24, r24
 428:	c9 f3       	breq	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>


	if ( gTransferError ) 
 42a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 42e:	88 23       	and	r24, r24
 430:	41 f0       	breq	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    {        
        // Signal Error on LEDs by turning them all on
        LEDPORT.OUT = 0x00;
 432:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
		
        do 
        {
			nop();
 436:	00 00       	nop
            // Completed with failure
		} while (1);
 438:	fe cf       	rjmp	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
        LEDPORT.OUT = 0x00;
	}
	else
	{
		// Signal success on one LED
		LEDPORT.OUT = ~0x01;
 43a:	8e ef       	ldi	r24, 0xFE	; 254
 43c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
 440:	c8 cf       	rjmp	.-112    	; 0x3d2 <main+0x4c>
            // Completed with failure
		} while (1);
	} else 
    {        
        // Signal success on one LED
        LEDPORT.OUT = ~0x02;
 442:	8d ef       	ldi	r24, 0xFD	; 253
 444:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
	    do 
        {
			nop();
 448:	00 00       	nop
            // Completed with no error
        } while (1);
 44a:	fe cf       	rjmp	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>

0000044c <__vector_6>:
}


// DMA CH0 Interrupt service routine. Clear interrupt flags after check
ISR(DMA_CH0_vect)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	8f 93       	push	r24
    if (DMA.INTFLAGS & DMA_CH0TRNIF_bm) 
 458:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 45c:	80 fd       	sbrc	r24, 0
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__vector_6+0x36>
    {
        DMA.INTFLAGS |= DMA_CH0TRNIF_bm;
        gTransferError = false;
    } else 
    {
        DMA.INTFLAGS |= DMA_CH0ERRIF_bm;
 460:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 464:	80 61       	ori	r24, 0x10	; 16
 466:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
        gTransferError = true;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
    }
    gInterruptDone = true;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 65 20 	sts	0x2065, r24	; 0x802065 <gInterruptDone>
}
 476:	8f 91       	pop	r24
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti
// DMA CH0 Interrupt service routine. Clear interrupt flags after check
ISR(DMA_CH0_vect)
{
    if (DMA.INTFLAGS & DMA_CH0TRNIF_bm) 
    {
        DMA.INTFLAGS |= DMA_CH0TRNIF_bm;
 482:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
 486:	81 60       	ori	r24, 0x01	; 1
 488:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
        gTransferError = false;
 48c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 490:	ef cf       	rjmp	.-34     	; 0x470 <__vector_6+0x24>

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
